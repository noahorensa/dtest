# module name
MODULE = 

# dtest executable to build
DTEST = dtest

# add any include directories
INCLUDES = -I../include

# add any library directories and files
LIB_DIRS = -L../lib
LIBS = -lmylib
LIB_DEPEND = ../lib/libmylib.a

CXX = g++
CPPFLAGS = -Werror -Wall -Winline -Wpedantic
CXXFLAGS = -std=c++11 -march=native -fPIC

################################################################################

DTEST_REPO=https://git.cs.usask.ca/discus/dtest.git

LDFLAGS = -Wl,-E -Wl,-export-dynamic

DEPFLAGS = -MM

BUILD_DIR = build/$(shell uname -s)-$(shell uname -m)

SOURCES = $(wildcard *.dtest.cpp)
OBJ_FILES = $(SOURCES:%.dtest.cpp=$(BUILD_DIR)/%.dtest.so)

.PHONY : all clean clean-dep dtest

################################################################################

all : $(OBJ_FILES)

ifndef nodep
include $(SOURCES:%.cpp=.dep/%.d)
else
ifneq ($(nodep), true)
include $(SOURCES:%.cpp=.dep/%.d)
endif
endif

# cleanup

clean :
	@rm -rf build
	@echo "Cleaned $(MODULE)/test/build/"

clean-dep :
	@rm -rf .dep
	@echo "Cleaned $(MODULE)/test/.dep/"

# dirs

.dep $(BUILD_DIR):
	@echo "MKDIR     $(MODULE)/test/$@/"
	@mkdir -p $@

# test

dtest:
	@[ ! -d "dtest" ] && git clone -q $(DTEST_REPO) || :
	@git -C dtest pull -q
	@$(MAKE) -C dtest --no-print-directory $(DTEST)

.dep/%.d : %.cpp | .dep
	@echo "DEP       $(MODULE)/test/$@"
	@set -e; rm -f $@; \
	$(CXX) $(DEPFLAGS) $(INCLUDES) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(BUILD_DIR)/\1.so $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

$(BUILD_DIR)/%.dtest.so : %.dtest.cpp $(LIB_DEPEND) | $(BUILD_DIR) dtest
	@echo "CXX       $(MODULE)/test/$@"
	@$(CXX) -shared $(CPPFLAGS) $(CXXFLAGS) $(EXTRACXXFLAGS) -Idtest/include $(INCLUDES) $< $(LD_FLAGS) $(LIB_DIRS) $(LIBS) -o $@
